generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
}

enum Status {
  ongoing
  completed
  cancelled
}

model Manga {
  id          String         @id @default(uuid())
  title       String
  slug        String      @unique
  author      String?
  status      Status?     @default(ongoing)
  synopsis    String
  thumbnail   String
  releaseDate DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chapters    Chapter[]
  rate        RateManga[]
  gender      Gender[]    @relation("GenderToManga")
  views       Int         @default(0)

  @@unique([title, author])
  @@map("mangas")
}

model Gender {
  id     String     @id @default(uuid())
  name   String
  mangas Manga[] @relation("GenderToManga")

  @@map("genders")
}

model RateManga {
  id      String   @id @default(uuid())
  mangaId String
  userId  String
  rate    Int
  manga   Manga @relation(fields: [mangaId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@map("rate_mangas")
}

enum Role {
  user
  mod
  admin
}

model User {
  id        String         @id @default(uuid())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  role      Role        @default(user)
  rate      RateManga[]
  chapter   Chapter[]

  @@map("users")
}

model Chapter {
  id          String      @id @default(uuid())
  title       String?
  number      Float
  content     String
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  updatedAt   DateTime @updatedAt
  mangaId     String
  manga       Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@map("chapters")
}
